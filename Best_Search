#! /usr/bin/python

"""
Letter Rewrite System
Copyright 2016 Brady Garvin
This system will rewrite the string 'ababb' to the string 'bcb'. From shell, run

	$  python rewrites.py
	
shell will state whether a solution was found or not. If one was from it will display a set containing a list of strings with letter replacements used to achieve the final string.
"""
from Queue import PriorityQueue



def positions_in(substring, string):
	"""
	Preconditions: substring and string are strings.
	Postconditions: The return value is the list of indices where the substring appears in the string.
	
	>>> positions_in('a', 'alphabet')
	[0, 4]
	>>> positions_in('b', 'alphabet')
	[5]
	>>> positions_in('c', 'alphabet')
	[]
	>>> positions_in('ab', 'alphabet')
	[4]
	"""
	result = []
	index = -1
	while True:
		index = string.find(substring, index + 1)
		if index == -1:
			return result
		result.append(index)
 
def get_neighbors_via_first_move(string):
	"""
 	Precondition: string is a string.
 	Postcondition: The returned set contains a list of modified strings based on the given string with replacement of 'c' for each 'a' in the string.
 	
 	>>> get_neighbors_via_first_move('cat')
 	set(['cct'])
 	>>> get_neighbors_via_first_move('ababb')
 	set(['cbabb', 'abcbb'])
	"""
	return {string[:position] + 'c' + string[position + 1:] for position in positions_in('a', string)}

def get_neighbors_via_second_move(string):
	"""
 	Precondition: string is a string.
 	Postcondition: A set is returned that contains a list of strings that are edits of the original with replacement of 'b' for each 'c' in the string.
 	
 	>>> get_neighbors_via_second_move('cat')
 	set(['bat'])
 	>>> get_neighbors_via_second_move('cac')
 	set(['cab', 'bac'])
	"""
	return {string[:position] + 'b' + string[position + 1:] for position in positions_in('c', string)}

def get_neighbors_via_third_move(string):
	"""
 	Precondition: string is a string.
 	Postcondition: The returned set contains a list of strings based on the original string. The new strings have a replacement of 'c' for each 'bb' in the string.
 	
 	>>> get_neighbors_via_third_move('bbat')
 	set(['cat'])
 	>>> get_neighbors_via_third_move('ababb')
 	set(['abac'])
	>>> get_neighbors_via_third_move('bbacbb')
 	set(['bbacc', 'cacbb'])
	"""
	return {string[:position] + 'c' + string[position + 2:] for position in positions_in('bb', string)}

def get_neighbors_via_fourth_move(string):
	"""
 	Precondition: string is a string.
 	Postcondition: A set is returned which contains a list of strings that are edits of the given string. The new strings have a replacement of 'b' for each 'ba' in the string.
 	
 	>>> get_neighbors_via_fourth_move('baat')
 	set(['bat'])
 	>>> get_neighbors_via_fourth_move('ababb')
 	set(['abbb'])
 	>>> get_neighbors_via_fourth_move('abaccba')
 	set(['abaccb', 'abccba'])
	"""
	return {string[:position] + 'b' + string[position + 2:] for position in positions_in('ba', string)}

def get_all_neighbors(string):
	"""
 	Precondition: string is a string.
 	Postcondition: The returned set contains a list of all the strings from the four functions above.
 	
 	>>> get_all_neighbors('cat')
 	set(['cct', 'bat'])
 	>>> get_all_neighbors('ababb')
 	set(['abcbb', 'cbabb', 'abbb', 'abac'])
 	>>> get_all_neighbors('bbac')
 	set(['cac', 'bbab', 'bbcc', 'bbc'])
	"""
	return get_neighbors_via_first_move(string) | get_neighbors_via_second_move(string) | get_neighbors_via_third_move(string) | get_neighbors_via_fourth_move(string)

source = 'ababb'
destination = 'bcb'

def heuristic(string):	# Heuristic is admissible. Will generate a number of the letter difference between the string currently being worked on and the destination. That number will be always be less then the number of transitions needed to get to the destination string because it does not consider the transitions rules. 
	"""
 	Precondition: string is a string
 	Postcondition: Value returned is the absolute value of the difference between the length of the string given and the length of the destination string.
 	
 	>>> heuristic('ababb')
 	2
 	>>> heuristic('abac')
 	1
 	>>> heuristic('a')
 	2
 	"""
	return abs(len(string) - len(destination))

solution = None
worklist = PriorityQueue()
worklist.put((0 + heuristic(source), 0,  [source]))
closed = set()
while not worklist.empty():
	estimate, distance, path = worklist.get(False)
	end = path[-1]
	if end not in closed:
		closed |= {end}
		for extension in get_all_neighbors(end):
			worklist.put((heuristic(extension), distance + len(extension), path + [extension]))
	if end == destination:
		solution = path
		
print('Found a way to rewrite {source} to get {destination}:\n  {solution}'.format(source = repr(source), destination = repr(destination), solution = solution))

 	
 	
